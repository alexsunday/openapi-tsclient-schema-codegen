{{>header}}

import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;
export type RequestInterceptor = (options: ApiRequestOptions) => ApiRequestOptions | Promise<ApiRequestOptions>;
export type ResponseInterceptor = (result: ApiResult) => ApiResult | Promise<ApiResult>;

export type ApiRspType<T> = T extends (...args: any[]) => Promise<infer R> ? R : any
export type OnionInner<T, K extends keyof T> = {
    [P in keyof T[K]]: T[K][P]
}
export type Compute<A extends any> = A extends Function ? A : { [K in keyof A]: A[K] }
export type Merge<O1 extends object, O2 extends object> =  Compute<O1 & Omit<O2, keyof O1>>

type Config = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    TOKEN?: string | Resolver<string>;
    USERNAME?: string | Resolver<string>;
    PASSWORD?: string | Resolver<string>;
    HEADERS?: Headers | Resolver<Headers>;
    ReqInterceptors: RequestInterceptor[];
    RspInterceptors: ResponseInterceptor[];
    TIMEOUT: number;
}

export const OpenAPI: Config = {
    BASE: '{{{server}}}',
    VERSION: '{{{version}}}',
    WITH_CREDENTIALS: false,
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ReqInterceptors: [],
    RspInterceptors: [],
    TIMEOUT: 30 * 1000,
};

export type apiOption = {
    base?: string;
    reqInterceptors?: RequestInterceptor[];
    rspInterceptors?: ResponseInterceptor[];
    rspValidator?: boolean;
}

export type requestOption = {
    operationId: string;
    schemas: any;
    base: string;
    reqInterceptors: RequestInterceptor[];
    rspInterceptors: ResponseInterceptor[];
    raw: boolean;
    rspValidator: boolean;
}

export function AddRequestInterceptor(r: RequestInterceptor) {
    OpenAPI.ReqInterceptors.push(r);
}

export function AddResponseInterceptor(r: ResponseInterceptor) {
    OpenAPI.RspInterceptors.push(r);
}

export function SetServiceApiTimeout(timeout: number) {
    OpenAPI.TIMEOUT = timeout * 1000;
}
