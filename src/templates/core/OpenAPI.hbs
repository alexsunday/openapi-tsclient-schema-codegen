{{>header}}

import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;
type RequestInterceptor = (options: ApiRequestOptions) => ApiRequestOptions | Promise<ApiRequestOptions>;
type ResponseInterceptor = (result: ApiResult) => ApiResult | Promise<ApiResult>;

type Config = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    TOKEN?: string | Resolver<string>;
    USERNAME?: string | Resolver<string>;
    PASSWORD?: string | Resolver<string>;
    HEADERS?: Headers | Resolver<Headers>;
    ReqInterceptors: RequestInterceptor[];
    RspInterceptors: ResponseInterceptor[];
}

export const OpenAPI: Config = {
    BASE: '{{{server}}}',
    VERSION: '{{{version}}}',
    WITH_CREDENTIALS: false,
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ReqInterceptors: [],
    RspInterceptors: [],
};

export function AddRequestInterceptor(r: RequestInterceptor) {
    OpenAPI.ReqInterceptors.push(r);
}

export function AddResponseInterceptor(r: ResponseInterceptor) {
    OpenAPI.RspInterceptors.push(r);
}
