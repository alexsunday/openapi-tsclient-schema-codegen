{{>header}}

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { OpenAPI, requestOption, RequestInterceptor, ResponseInterceptor } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>fetch/getRequestBody}}


{{>fetch/sendRequest}}


{{>fetch/getResponseHeader}}


{{>fetch/getResponseBody}}


{{>functions/catchErrors}}


{{>functions/checkJsonSchema}}


/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function rawRequest(options: ApiRequestOptions): Promise<ApiResult> {
    // request interceptor
    let reqInterceptors = OpenAPI.ReqInterceptors;
    for(let i=0; i!==reqInterceptors.length; i++) {
        let rs = reqInterceptors[i](options);
        options = await Promise.resolve<ApiRequestOptions>(rs);
    }

    let result: ApiResult;
    try {
        const response = await sendRequest(options);
        const responseBody = await getResponseBody(response);
        const responseHeader = getResponseHeader(response, options.responseHeader);
        result = {
            url: options.url || "",
            ok: response.ok,
            status: response.status,
            statusText: response.statusText,
            body: responseHeader || responseBody,
            response: response,
            errors: [],
        };
    } catch(e) {
        result = {
            url: options.url || "",
            ok: false,
            status: 0,
            statusText: "Failed to fetch",
            body: "Failed to fetch",
            response: new Response(),
            errors: [],
        };
    }

    // response code error?
    const hasErr = catchErrors(options, result);
    if(hasErr) {
        result.errors.push(hasErr);
    }

    // response interceptor
    let rspInterceptors = OpenAPI.RspInterceptors;
    for(let i=0; i!==rspInterceptors.length; i++) {
        let rs = rspInterceptors[i](result);
        result = await Promise.resolve<ApiResult>(rs)
    }

    if(result.errors.length > 0) {
        throw result.errors;
    }

    return result;
}

export function replaceBase(base: string) {
  return (options: ApiRequestOptions): ApiRequestOptions => {
    let rs = { ...options };
    rs.url = getUrl(base, options.path, options.query);
    return rs;
  };
}

/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function request(options: ApiRequestOptions, op: requestOption): Promise<ApiResult> {
    // request interceptor
    const reqInterceptors: RequestInterceptor[] = [];
    reqInterceptors.push(...op.reqInterceptors);
    reqInterceptors.push(...OpenAPI.ReqInterceptors);
    for(let i=0; i!==reqInterceptors.length; i++) {
        let rs = reqInterceptors[i](options);
        options = await Promise.resolve<ApiRequestOptions>(rs);
    }

    let result: ApiResult;
    try {
        const response = await sendRequest(options);
        const responseBody = await getResponseBody(response);
        const responseHeader = getResponseHeader(response, options.responseHeader);
        result = {
            url: options.url || "",
            ok: response.ok,
            status: response.status,
            statusText: response.statusText,
            body: responseHeader || responseBody,
            response: response,
            errors: [],
        };
    } catch(e) {
        result = {
            url: options.url || "",
            ok: false,
            status: 0,
            statusText: "Failed to fetch",
            body: "Failed to fetch",
            response: new Response(),
            errors: [],
        };
    }

    // response code error?
    const hasErr = catchErrors(options, result);
    if(hasErr) {
        result.errors.push(hasErr);
    }

    // json schema error?
    if(op.rspValidator) {
        let checkErr = checkJsonSchema(op.operationId, op.schemas, result);
        if(checkErr === false) {
            console.warn(`[$op.operationId] ignored json schema check.`);
        }
        if(checkErr !== false && checkErr !== true) {
            result.errors.push(checkErr);
        }
    }

    // response interceptor
    let rspInterceptors:ResponseInterceptor[] = [];
    rspInterceptors.push(...op.rspInterceptors);
    rspInterceptors.push(...OpenAPI.RspInterceptors);
    for(let i=0; i!==rspInterceptors.length; i++) {
        let rs = rspInterceptors[i](result);
        result = await Promise.resolve<ApiResult>(rs)
    }

    if(result.errors.length > 0) {
        throw result.errors;
    }

    return result;
}
